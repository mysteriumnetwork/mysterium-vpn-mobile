default_platform(:android)

platform :android do
  desc "Builds the debug code"
  lane :buildDebug do
    gradle(task: "assembleDebug", project_dir: "android")
  end

  desc "Builds the release code"
  lane :buildRelease do
    gradle(task: "assembleRelease", project_dir: "android")
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test", project_dir: "android")
  end

  desc "Build release build locally"
  lane :build do
    gradle(
      task: "clean assembleRelease",
      project_dir: "android",
      print_command: false, # to prevent outputting passwords
      properties: {
        'versionCode' => 1,
        'versionName' => last_git_tag,
        'applyGoogleServices' => true,
        "android.injected.signing.store.file" => ENV["FASTLANE_ANDROID_SIGNING_FILE_PATH"],
        "android.injected.signing.store.password" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PASS"],
        "android.injected.signing.key.alias" => ENV["FASTLANE_ANDROID_SIGNING_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["FASTLANE_ANDROID_SIGNING_KEY_PASS"],
      })
  end

  desc "Push a new internal build to Play Store"
  lane :internal do
    gradle(
      task: "clean bundle",
      build_type: "Release",
      project_dir: "android",
      print_command: false, # to prevent outputting passwords
      properties: {
        'versionCode' => version_code,
        'versionName' => last_git_tag,
        'applyGoogleServices' => true,
        "android.injected.signing.store.file" => ENV["FASTLANE_ANDROID_SIGNING_FILE_PATH"],
        "android.injected.signing.store.password" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PASS"],
        "android.injected.signing.key.alias" => ENV["FASTLANE_ANDROID_SIGNING_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["FASTLANE_ANDROID_SIGNING_KEY_PASS"],
      })
    upload_to_play_store(
      track: "internal",
      json_key: ENV["FASTLANE_ANDROID_SECRET_JSON_PATH"]
    )
  end

  desc "Increase Android code version"
  lane :bumpAndroidVersionCode do
    increase_version_code
  end
end

def increase_version_code
  versionCode = File.read("./android_version_code").to_i
  versionCode = versionCode+1
  f = File.new("./android_version_code", "w")
  f.write(versionCode)
  f.close
end

def version_code
  return File.read("./android_version_code").to_i
end
